@page "/register"
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager Navigation
@inject SignInManager<IdentityUser> SignInManager
@inject NotificationService NotificationService

<div class="register-container">
    <h3 class="register-title">Register</h3>
  <RadzenCard Style="max-width: 400px; margin: auto; padding: 20px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);">
    <RadzenTemplateForm TItem="RegisterModel" Data="@model" Submit="RegisterUser">
            <RadzenTextBox bind-Value="model.Email" Placeholder="Email" Style="width: 100%;" Class="input-field" />
            <RadzenTextBox bind-Value="model.Username" Placeholder="Username" Type="text" Style="width: 100%;" Class="input-field" />
            <RadzenTextBox bind-Value="model.Password" Type="password" Placeholder="Password" Style="width: 100%;" Class="input-field" />
            <RadzenTextBox bind-Value="model.ConfirmPassword" Type="password" Placeholder="Confirm Password" Class="input-field" />

            <RadzenButton Text="Register" ButtonType="ButtonType.Submit" Style="width: 100%;" Class="register-btn" />
    </RadzenTemplateForm>
  </RadzenCard>

<RadzenNotification />
</div>

@code {
    private RegisterModel model = new RegisterModel();

    async Task RegisterUser()
    {
        // Provjera da li lozinke odgovaraju
        if (model.Password != model.ConfirmPassword)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Passwords do not match!");
            return;
        }

        // Provjera minimalne dužine lozinke
        if (model.Password.Length < 8)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Password must be at least 8 characters long!");
            return;
        }

        // Kreiranje novog korisnika
        var user = new IdentityUser
            {
                UserName = model.Username,
                Email = model.Email
            };

        var result = await UserManager.CreateAsync(user, model.Password);

        if (result.Succeeded)
        {
            // Automatska prijava korisnika nakon registracije
            await SignInManager.SignInAsync(user, isPersistent: false);
            Navigation.NavigateTo("/");
        }
        else
        {
            // Prikazivanje greške ako registracija nije uspjela
            foreach (var error in result.Errors)
            {
                NotificationService.Notify(NotificationSeverity.Error, error.Description);
            }
        }
    }

    public class RegisterModel
    {
        public string Email { get; set; } = string.Empty;
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
